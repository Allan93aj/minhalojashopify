<div class="kit-builder-container">
  <!-- Passos lado a lado -->
  <div class="steps-container">
    <div class="step" data-step="1">
      <label for="step1-select">Passo 1</label>
      <select id="step1-select" class="kit-select"></select>
    </div>
    <div class="step" data-step="2">
      <label for="step2-select">Passo 2</label>
      <select id="step2-select" class="kit-select" disabled></select>
    </div>
    <div class="step" data-step="3">
      <label for="step3-select">Passo 3</label>
      <select id="step3-select" class="kit-select" disabled></select>
    </div>
  </div>

  <!-- Produtos -->
  <div id="products-container" class="products-container"></div>

  <!-- Botões -->
  <div id="button-container" class="kit-builder-buttons">
    <button id="back-button" class="btn-secondary" disabled>Voltar</button>
    <button id="next-button" class="btn-primary" disabled>Próximo</button>
    <button id="finish-button" class="btn-primary" style="display:none;">Finalizar</button>
  </div>

  <!-- Resumo -->
  <div id="summary-section" class="summary-section" style="display:none;">
    <h2>Resumo do Kit</h2>
    <div id="summary-content"></div>
    <p class="total">Total: <span id="summary-total">R$ 0,00</span></p>
    <button id="add-to-cart" class="btn-primary">Adicionar ao carrinho</button>
  </div>
</div>

{% stylesheet %}
.kit-builder-container {
  padding: 40px;
  text-align: center;
  font-family: 'Helvetica Neue', sans-serif;
}

.steps-container {
  display: flex;
  justify-content: center;
  gap: 30px;
  margin-bottom: 30px;
  flex-wrap: wrap;
}

.step label {
  display: block;
  font-weight: bold;
  margin-bottom: 8px;
}

.kit-select {
  padding: 10px 15px;
  border-radius: 8px;
  border: 1px solid #ccc;
  background: #fff;
  min-width: 220px;
  font-size: 15px;
}

.products-container {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: 20px;
}

.product-card {
  border: 1px solid #eee;
  border-radius: 10px;
  padding: 15px;
  width: 220px;
  cursor: pointer;
  transition: 0.3s;
  box-shadow: 0 2px 8px rgba(0,0,0,0.05);
}

.product-card:hover {
  transform: translateY(-3px);
  box-shadow: 0 4px 12px rgba(0,0,0,0.1);
}

.product-card img {
  width: 100%;
  border-radius: 8px;
}

.product-card h3 {
  font-size: 16px;
  margin: 10px 0 5px;
}

.product-card p {
  color: #555;
}

.product-card.selected {
  border-color: #000;
  box-shadow: 0 0 0 2px #000;
}

.product-card.disabled {
  opacity: 0.4;
  pointer-events: none;
}

.kit-builder-buttons {
  margin-top: 30px;
  display: flex;
  justify-content: center;
  gap: 20px;
}

.btn-primary, .btn-secondary {
  padding: 12px 25px;
  border-radius: 6px;
  border: none;
  font-weight: bold;
  cursor: pointer;
  transition: 0.3s;
}

.btn-primary {
  background-color: #000;
  color: #fff;
}

.btn-primary:hover {
  background-color: #333;
}

.btn-secondary {
  background-color: #ddd;
  color: #000;
}

.btn-secondary:hover {
  background-color: #ccc;
}

.summary-section {
  margin-top: 40px;
}

.summary-section h2 {
  margin-bottom: 20px;
}

.total {
  font-size: 20px;
  font-weight: bold;
  margin-top: 20px;
}

{% endstylesheet %}

<script>
  document.addEventListener("DOMContentLoaded", () => {
  const collections = window.kitBuilderCollections || [];
  const selects = [
    document.getElementById("step1-select"),
    document.getElementById("step2-select"),
    document.getElementById("step3-select"),
  ];

  const productsContainer = document.getElementById("products-container");
  const nextButton = document.getElementById("next-button");
  const backButton = document.getElementById("back-button");
  const finishButton = document.getElementById("finish-button");
  const summarySection = document.getElementById("summary-section");
  const summaryContent = document.getElementById("summary-content");
  const summaryTotal = document.getElementById("summary-total");
  const addToCartButton = document.getElementById("add-to-cart");

  let currentStep = 0;
  const selectedProducts = [null, null, null];

  async function fetchProducts(handle) {
    const response = await fetch(`/collections/${handle}/products.json`);
    const data = await response.json();
    return data.products;
  }

  function formatPrice(price) {
    return new Intl.NumberFormat("pt-BR", {
      style: "currency",
      currency: "BRL",
    }).format(price / 100);
  }

  function renderProducts(products) {
    productsContainer.innerHTML = "";
    products.forEach((product) => {
      const variant = product.variants[0];
      const card = document.createElement("div");
      card.classList.add("product-card");
      card.innerHTML = `
        <img src="${product.images[0]?.src}" alt="${product.title}">
        <h3>${product.title}</h3>
        <p>${formatPrice(variant.price)}</p>
      `;
      card.addEventListener("click", () => selectProduct(product, card));
      productsContainer.appendChild(card);
    });
  }

  function selectProduct(product, card) {
    selectedProducts[currentStep] = product;
    document.querySelectorAll(".product-card").forEach(c => {
      c.classList.add("disabled");
      c.classList.remove("selected");
    });
    card.classList.remove("disabled");
    card.classList.add("selected");
    nextButton.disabled = false;
  }

  async function loadStep(step) {
    productsContainer.innerHTML = "<p>Carregando produtos...</p>";
    nextButton.disabled = true;

    const collection = collections[step];
    if (!collection) {
      productsContainer.innerHTML = "<p>Nenhuma coleção configurada.</p>";
      return;
    }

    const handle = collection.handle;
    const products = await fetchProducts(handle);
    renderProducts(products);
  }

  function showSummary() {
    productsContainer.style.display = "none";
    document.querySelector(".steps-container").style.display = "none";
    document.getElementById("button-container").style.display = "none";
    summarySection.style.display = "block";

    let total = 0;
    summaryContent.innerHTML = "";
    selectedProducts.forEach((p) => {
      const variant = p.variants[0];
      total += parseFloat(variant.price);
      summaryContent.innerHTML += `
        <div class="summary-item">
          <p>${p.title} - ${formatPrice(variant.price)}</p>
        </div>
      `;
    });
    summaryTotal.textContent = formatPrice(total);
  }

  async function addToCart() {
    for (let p of selectedProducts) {
      if (!p) continue;
      const variant = p.variants[0];
      await fetch("/cart/add.js", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ id: variant.id, quantity: 1 }),
      });
    }
    window.location.href = "/cart";
  }

  nextButton.addEventListener("click", async () => {
    currentStep++;
    if (currentStep < 3) {
      await loadStep(currentStep);
      backButton.disabled = false;
      if (currentStep === 2) {
        nextButton.style.display = "none";
        finishButton.style.display = "inline-block";
      }
    }
  });

  backButton.addEventListener("click", async () => {
    if (currentStep > 0) {
      currentStep--;
      await loadStep(currentStep);
      if (currentStep === 0) backButton.disabled = true;
      finishButton.style.display = "none";
      nextButton.style.display = "inline-block";
    }
  });

  finishButton.addEventListener("click", showSummary);
  addToCartButton.addEventListener("click", addToCart);

  // Carrega primeiro passo
  loadStep(0);
});

</script>

{% schema %}
{
  "name": "Kit Builder",
  "tag": "section",
  "settings": [
    {
      "type": "header",
      "content": "Monte seu kit com coleções"
    },
    {
      "type": "collection_list",
      "id": "collections",
      "label": "Coleções disponíveis (ordem = passo 1, 2 e 3)",
      "limit": 3
    }
  ],
  "presets": [
    {
      "name": "Kit Builder",
      "category": "Produtos"
    }
  ]
}
{% endschema %}
